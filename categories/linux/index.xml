<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on /dev/ser</title>
    <link>https://devser.com.br/categories/linux/</link>
    <description>Recent content in Linux on /dev/ser</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <lastBuildDate>Mon, 19 Aug 2019 20:21:00 -0300</lastBuildDate>
    
	<atom:link href="https://devser.com.br/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hello world e SHA-256 em C</title>
      <link>https://devser.com.br/posts/hello-world-e-sha256-em-c/</link>
      <pubDate>Mon, 19 Aug 2019 20:21:00 -0300</pubDate>
      
      <guid>https://devser.com.br/posts/hello-world-e-sha256-em-c/</guid>
      <description>No vídeo de hoje, eu mostro como implementar um simples &amp;ldquo;Hello, world!&amp;rdquo; utilizando a linguagem de programação C.
Para os mais curiosos, vou além e ensino também como utilizar a biblioteca OpenSSL para calcular o hash SHA-256 de uma string.
Segue código final da rotina (arquivo main.c):
// File: main.c  #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;openssl/sha.h&amp;gt;#include &amp;lt;string.h&amp;gt; int main(int argcount, char **args) { if (argcount != 2) { printf(&amp;#34;Usage: %s &amp;lt;string&amp;gt;\n&amp;#34;, args[0]); return 1; } printf(&amp;#34;INPUT: %s\n&amp;#34;, args[1]); unsigned char *hash = SHA256(args[1], strlen(args[1]), NULL); printf(&amp;#34;SHA256: &amp;#34;); for (int i = 0; i &amp;lt; 32; i++) { printf(&amp;#34;%02x&amp;#34;, hash[i]); } printf(&amp;#34;\n&amp;#34;); return 0; } Comandos para compilar e executar a rotina acima, no terminal do Linux:</description>
    </item>
    
    <item>
      <title>Como gerar uma senha aleatória no terminal do Linux</title>
      <link>https://devser.com.br/posts/como-gerar-uma-senha-aleatoria-no-terminal-do-linux/</link>
      <pubDate>Tue, 18 Jun 2019 21:36:28 -0300</pubDate>
      
      <guid>https://devser.com.br/posts/como-gerar-uma-senha-aleatoria-no-terminal-do-linux/</guid>
      <description>Gerar uma senha aleatória no terminal do Linux não é só possível, como altamente recomendado, pois assim você garante que a senha gerada, em nenhum momento, passe pelas mãos de terceiros.
Execute o comando abaixo no terminal:
cat /dev/random | stdbuf -o0 tr -cd &#39;[:graph:]&#39; | stdbuf -o0 head -c 32  Se você quiser entender melhor o que significa cada parte do comando, assista o vídeo a seguir:
  </description>
    </item>
    
    <item>
      <title>Como aumentar o espaço da partição /dev/shm</title>
      <link>https://devser.com.br/posts/como-aumentar-o-espaco-da-particao-dev-shm/</link>
      <pubDate>Tue, 06 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://devser.com.br/posts/como-aumentar-o-espaco-da-particao-dev-shm/</guid>
      <description>(Co-publicado em Time Raposa)
A partição /dev/shm utiliza o filesystem tmpfs, sistema de arquivos especial, armazenado 100% na memória RAM.
Essa partição é muito importante para facilitar a troca de informações entre diferentes processos do sistema operacional, e também para deixar alguns processos mais rápidos.
No Debian 9 (e em outras distros também), o padrão é que essa partição seja montada com 50% da memória RAM. No meu caso, tenho uma máquina com 16GB de RAM, então quando eu ligo meu sistema, possuo 8GB nessa partição:</description>
    </item>
    
    <item>
      <title>Leitura de porta serial utilizando Python e Raspberry PI</title>
      <link>https://devser.com.br/posts/leitura-de-porta-serial-utilizando-python-e-raspberry-pi/</link>
      <pubDate>Fri, 02 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://devser.com.br/posts/leitura-de-porta-serial-utilizando-python-e-raspberry-pi/</guid>
      <description>(Co-publicado em Time Raposa)
Hoje vou explicar como fazer a leitura de porta serial utilizando Python e Raspberry PI.
Suponhamos que você trabalhe para um cliente que possui uma balança Toledo 820J/XIV, conectada a um display Toledo 8540, ambos fabricados em abril de 2010.
Você quer monitorar, em tempo real, a balança e publicar o valor medido, continuamente, em um webservice. Como fazer isso?
Passo 1 – Obtenha a documentação do fabricante Sempre que você deseja se comunicar com um produto de terceiros (seja ele um hardware, ou até mesmo um webservice), o primeiro passo é obter a documentação do fabricante, para entender como a comunicação deve ser realizada.</description>
    </item>
    
    <item>
      <title>Comunicação segura utilizando GPG</title>
      <link>https://devser.com.br/posts/comunicacao-segura-utilizando-gpg/</link>
      <pubDate>Tue, 28 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://devser.com.br/posts/comunicacao-segura-utilizando-gpg/</guid>
      <description>(Co-publicado em Time Raposa)
Todo time de T.I. deve ter a preocupação com políticas de acessos a senhas, principalmente em se tratando de credenciais de produção.
Algumas estratégias importantes para garantir a segurança dos sistemas de informações são:
 Rodízio constante de senhas Senhas diferentes para cada usuário  Mas um problema corriqueiramente encontrado é como comunicar essas senhas com segurança entre diferentes pessoas do time.
Uma solução para esse problema de comunicação é utilizar certificados GPG, e integrá-los com clientes de e-mail, por exemplo o Thunderbird.</description>
    </item>
    
  </channel>
</rss>